<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <!--SSM整合代码 start-->
    <!-- 注册spring的监听器 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:ssm/conf/applicationContext.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>


    <!-- 注册springmvc的中央调度器 -->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:ssm/conf/dispatcherServlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>/student/listStudent.do</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>dispatcherServlet2</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:ssm2/conf/dispatcherServlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcherServlet2</servlet-name>
        <url-pattern>/user/listUser.do</url-pattern>
    </servlet-mapping>
    <!--end-->
    <!--1、注册中央调度器DispatcherServlet

    在启动tomcat时，创建DispatcherServlet对象时，出错，找不到文件：/WEB-INF/SpringMVC-servlet.xml

    默认找的文件命名是：<servlet-name>-servlet.xml

    为什么要找文件<servlet-name>-servlet.xml？
        DispatcherServlet在他的初始方法（init）中，要创建SpringMVC的容器对象（WebApplicationContext）
        在创建容器时，需要读取容器的配置文件（xml文件）。默认的配置文件是 /WEB-INF/<servlet-name>-servlet.xml
    -->
    <servlet>
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!-- 3、 需要给DispatcherServlet提供自定义配置文件的位置 -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:SpringMVC.xml</param-value>
        </init-param>

        <!--2、在服务器（tomcat）启动的时候，创建DispatcherServlet的实例对象-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
        <!--
           4、url-pattern:把请求交给指定的Servlet处理
           把用户的请求交给DispatcherServlet,交给了DispatcherServlet的请求，才能够通过SpringMVC框架处理，使用框架的各种功能。

           设置方式：
           1.扩展名 :  *.xxx , xxx就是自定义的扩展名，例如*.do, *.action, *.mvc等等，不能使用 *.jsp
           2.斜杠 "/" 相当于把所有的请求交给了中央调度器，但目前中央调度器只有处理some.do的处理器对象MyControler
  	         p1.jpg, test.html没有对应的处理器对象，所以请求不能处理，是404.
  	         使用“/”导致的是静态资源（图片，css,js,html）不能正常访问， 动态资源可以访问。
         -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <absolute-ordering></absolute-ordering>

    <!-- 注解字符集过滤器，解决post请求中乱码的问题 -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <!-- spring-web.jar -->
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- 设置项目使用的字符编码 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>

        <!-- 强制请求(request)对象，使用encoding的字符编码 -->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>

        <!-- 强制应答（response）对象，使用encoding的字符编码 -->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>